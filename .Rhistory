getwd()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
flights <- flights
head(flights)
glimpse(flights)
flights %>% filter(month == 1, day %in% c(1,2))
#Arrival delay if two or more hours
flights %>% filter(arr_delay > 120)
#Flew to Houston (IAH or HOU)
glimpse(flights %>% filter(dest %in% c("IAH","HOU")))
#Were operated by United, American or Delta (UA, AA, DL)
glimpse(flights %>% filter(carrier %in% c("UA", "AA", "DL")))
#Departed in summer
glimpse(flights %>% filter(month %in% 7:9))
#Arrived more than two hours late but did not leave late
glimpse(flights %>% filter(arr_delay >= 60 & dep_delay <= 0))
#Delayed by at least one hour, but made up over 30 minutes in flight
glimpse(flights %>% filter(dep_delay >= 60 & arr_delay <( dep_delay - 30)))
#Departed between midnight and 5 a.m
glimpse(flights %>% filter(dep_time == 2400 | dep_time <= 600))
flights %>% filter(between(month,7,9))
flights %>% filter(is.na(dep_time))
flights %>% arrange(desc(is.na(dep_time)), dep_time)
#Most delayed
flights %>% arrange(desc(dep_delay))
#Left earliest
flights %>% arrange(dep_delay)
flights %>% arrange(air_time) %>%
select(origin, dest, air_time) %>%
head()
flights %>% arrange(desc(distance)) %>%
select(origin, dest, distance) %>%
head()
flights %>% arrange(distance) %>%
select(origin, dest, distance) %>%
head()
flights %>% select(one_of(c("year", "month")))
flights %>% select(contains("TIME"))
#test
flights_sml <- flights %>%
select(year:day,
ends_with("delay"),
distance,
air_time)
head(flights)
flights %>% arrange(dep_time)
flights %>% arrange(desc(dep_time))
flights %>% transmute(dep_time = dep_time %/% 100 + dep_time %% 100)
flights %>% transmute(dep_time = dep_time %/% 100 + dep_time %% 100,
sched_dep_time = sched_dep_time %/% 100 + dep_time %% 100)
flights %>% transmute(air_time)
flights %>% transmute(air_time,
diff_time = arr_time - dep_time)
glimpse(flights)
fligths %>% transmute(air_time,
arr_time = arr_time %/% 100 + arr_time %% 100,
dep_time = dep_time %/% 100 + dep_time %% 100,
air_time2 = dep_time - arr_time,
diff = air_time - air_time2)
flights %>% transmute(air_time,
arr_time = arr_time %/% 100 + arr_time %% 100,
dep_time = dep_time %/% 100 + dep_time %% 100,
air_time2 = dep_time - arr_time,
diff = air_time - air_time2)
flights %>% transmute(air_time,
arr_time = arr_time %/% 100 + arr_time %% 100,
dep_time = dep_time %/% 100 + dep_time %% 100,
air_time2 = arr_time - dep_time,
diff = air_time - air_time2)
flights %>% transmute(dep_time = (dep_time %/% 100)*60 + dep_time %% 100,
sched_dep_time = (sched_dep_time %/% 100)*60 + dep_time %% 100)
flights %>% transmute(air_time,
arr_time = (arr_time %/% 100)*60 + arr_time %% 100,
dep_time = (dep_time %/% 100)*60 + dep_time %% 100,
air_time2 = arr_time - dep_time,
diff = air_time - air_time2)
24*60
1430%%1440
1450%%1440
100%/%60
100%%60
source('M:/BankenesSikringsfond/Scripts/DataExploration.R', echo=TRUE)
#Kan man bruke GDP for Ã¥ modellerer makroÃ¸konomi?
pacf(makro$`BNP vekst`)
#Kan man bruke GDP for aa modellerer makroaakonomi?
pacf(makro$`BNP vekst`)
makro$`BNP vekst`
#Kan man bruke GDP for aa modellerer makroaakonomi?
pacf(makro$`BNP vekst`, na.rm = T)
?pacf
#Kan man bruke GDP for aa modellerer makroaakonomi?
pacf(makro$`BNP vekst`, na.action = na.pass)
makro %>% ggplot() +
geom_line(aes(x = Timestamp, y = `BNP vekst`))
library(forecast)
#Test forecast av BNP
bnp_vekst <- makro$`BNP vekst`
fit <- bnp_vekst(bnp_vekst)
fit <- auto.arima(bnp_vekst)
fit
plot(forecast(fit, h = 10))
plot(forecast(fit, h = 5))
fourierf(bnp_vekst,4,4)
fourier(bnp_vekst,4,4)
fourier(bnp_vekst,2,4)
fourier(bnp_vekst,1,4)
?predict
predict(fit)
forecast(fit, h = 5)
plot(forecast(fit, h = 30))
fcast <- forecast(fit, h = 15)
ts.plot(fcast)
ts.plot(fcast[,1])
ts.plot(fcast$mean)
ts.plot(c(bnp_vekst,fcast$mean))
mean(bnp_vekst)
mean(bnp_vekst[-1])
fit
#Decompose bnp_vekst
decomposeBnp <- decompose(bnp_vekst)
bnp_vekst <- bnp_vekst[!is.na[bnp_vekst]]
bnp_vekst <- bnp_vekst[!is.na(bnp_vekst)]
fit <- auto.arima(bnp_vekst)
plot(forecast(fit, h = 30))
#Decompose bnp_vekst
decomposeBnp <- decompose(bnp_vekst)
#Decompose bnp_vekst
decomposeBnp <- decompose(bnp_vekst, type = "additive")
stlBnp <- stl(bnp_vekst, s.window = "periodic")
?decompose
makro %>%
gather(key, value, -Timestamp) %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_line(aes(x = Timestamp, y = value))
autoplot(fit)
autoplot(forecast(fit))
?tslm
fit <- tslm(makro$`BNP vekst` ~ makro$Oljepris)
length(makro$Oljepris)
fit <- lm(makro$`BNP vekst` ~ makro$Oljepris)
summary(fit)
mdeaths
test <- mdeaths
fit <- tslm(as.ts(makro$`BNP vekst`) ~ as.ts(makro$Oljepris))
fit
autoplot(fit)
autoplot(forecast(fit))
autoplot(forecast(fit, h = 10))
fmdeaths <- cbind(Males=mdeaths, Females=fdeaths)
fit <- tslm(fmdeaths ~ trend + season)
fcast <- forecast(fit, h=10)
autoplot(fcast)
mdeaths
fdeaths
fit <- tslm(mdeaths ~ trend + season)
fcast <- forecast(fit, h=10)
autoplot(fcast)
ggtsdisplay(as.ts(bnp_vekst))
makro <- as.ts(makro)
makro
fit <- auto.arima(bnp_vekst)
plot(fit$residuals)
plot(fit)
plot(fit$fitted)
lines(bnp_vekst, col = "red")
ts.plot(bnp_vekst)
lines(fit$fitted, col = "red")
sd(bnp_vekst)
fit
?BoxCox
BoxCox
BoxCox.lambda
?bcloglik
BoxCox(bnp_vekst)
BoxCox(bnp_vekst, lambda = "auto")
bnp_vekst
1430 %% 1440
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
flights <- flights
head(flights)
glimpse(flights)
flights %>% filter(month == 1, day %in% c(1,2))
#Arrival delay if two or more hours
flights %>% filter(arr_delay > 120)
#Flew to Houston (IAH or HOU)
glimpse(flights %>% filter(dest %in% c("IAH","HOU")))
#Were operated by United, American or Delta (UA, AA, DL)
glimpse(flights %>% filter(carrier %in% c("UA", "AA", "DL")))
#Departed in summer
glimpse(flights %>% filter(month %in% 7:9))
#Arrived more than two hours late but did not leave late
glimpse(flights %>% filter(arr_delay >= 60 & dep_delay <= 0))
#Delayed by at least one hour, but made up over 30 minutes in flight
glimpse(flights %>% filter(dep_delay >= 60 & arr_delay <( dep_delay - 30)))
#Departed between midnight and 5 a.m
glimpse(flights %>% filter(dep_time == 2400 | dep_time <= 600))
flights %>% filter(between(month,7,9))
flights %>% filter(is.na(dep_time))
flights %>% arrange(desc(is.na(dep_time)), dep_time)
#Most delayed
flights %>% arrange(desc(dep_delay))
#Left earliest
flights %>% arrange(dep_delay)
flights %>% arrange(air_time) %>%
select(origin, dest, air_time) %>%
head()
flights %>% arrange(desc(distance)) %>%
select(origin, dest, distance) %>%
head()
flights %>% arrange(distance) %>%
select(origin, dest, distance) %>%
head()
flights %>% select(one_of(c("year", "month")))
flights %>% select(contains("TIME"))
#test
flights_sml <- flights %>%
select(year:day,
ends_with("delay"),
distance,
air_time)
flights %>% transmute(dep_time = (dep_time %/% 100)*60 + dep_time %% 100,
sched_dep_time = (sched_dep_time %/% 100)*60 + dep_time %% 100)
flights %>% transmute(air_time,
diff_time = arr_time - dep_time)
time2mins <- function(t){
(t%/%60*100 + t%%60) %% 1440
}
flights %>% transmute(air_time,
arr_time = (arr_time %/% 100)*60 + arr_time %% 100,
dep_time = (dep_time %/% 100)*60 + dep_time %% 100,
air_time2 = arr_time - dep_time,
diff = air_time - air_time2)
(t %/% 100 * 60 + t %% 100) %% 1440
(t %/% 100 * 60 + t%%100) %% 1440
50 %% 100
time2mins <- function(t){
(t %/% 100 * 60 + t %% 100) %% 1440
}
flights %>% transmute(air_time,
arr_time = time2mins(arr_time),
dep_time = time2mins(dep_time),
air_time2 = arr_time - dep_time,
diff = air_time - air_time2)
?rank
rank(c(1,4,2,5))
desc(c(1,4,2,5))
?desc
x <- c(1,4,2,5)
sort(x)
sort(desc(x))
rank(x)
rank(desc(x))
?sort
sort(x,decreasing = T)
forecast::ets
?forecast::ets
flights_sml <- flights %>%
select(dep_time, sched_dep_time, dep_delay)
flights %>% mutate(diff = dep_time - (sched_dep_time + dep_delay))
flights_sml %>% mutate(diff = dep_time - (sched_dep_time + dep_delay))
flights_sml %>% transmute(dep_time = time2mins(dep_time),
sched_dep_time = time2mins(sched_dep_time),
dep_delay = time2mins(dep_delay),
diff_time = dep_time - (sched_dep_time - dep_delay))
flights_sml %>% transmute(dep_time = time2mins(dep_time),
sched_dep_time = time2mins(sched_dep_time),
dep_delay = time2mins(dep_delay),
diff_time = dep_time - (sched_dep_time + dep_delay))
flights_sml <- flights %>%
select(dep_time, sched_dep_time, dep_delay)
flights_sml %>% transmute(dep_time = time2mins(dep_time),
sched_dep_time = time2mins(sched_dep_time),
diff_time = dep_time - (sched_dep_time + dep_delay))
flights_sml %>% transmute(dep_time = time2mins(dep_time),
sched_dep_time = time2mins(sched_dep_time),
dep_delay,
diff_time = dep_time - (sched_dep_time + dep_delay))
?min_rank
flights_delayed <- flights %>% mutate(dep_delayed_rank = min_rank(desc(dep_delay)))
glimpse(flights_delayed)
flights_delayed %>% filter(dep_delayed_rank <= 10)
flights_delayed %>% filter(dep_delayed_rank <= 10) %>% arrange(dep_delayed_rank)
?trig
?Trig
sinh(1)
f <- function(x,y) x^2 + y^2
5 %>% f(3)
tempdir()
?count
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled2 <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time))
rm(not_cancelled2)
not_cancelled %>% count(dest)
not_cancelled %>% group_by(dest) %>% summarise(n = n())
not_cancelled %>% group_by(dest) %>% summarise(n = n()) %>% arrange(desc(n))
not_cancelled %>% count(tailnum, wt = distance)
not_cancelled %>% count(tailnum)
test <- tibble(A = c("A", "A"), B = c(4,3))
test %>% count(A,wt = B)
test <- tibble(Z = c("A", "A"), B = c(4,3))
test %>% count(Z,wt = B)
test <- tibble(Z = c("A", "A", "S"), B = c(4,3,2))
test %>% count(Z,wt = B)
not_cancelled %>% group_by(tailnum) %>% summarize(n = sum(distance))
?tally
cancelled <- flights %>%
filter(is.na(dep_delay), is.na(arr_delay)) %>%
group_by(day)
cancelled <- flights %>%
filter(is.na(dep_delay), is.na(arr_delay)) %>%
group_by(day) %>% head()
cancelled <- flights %>%
filter(is.na(dep_delay), is.na(arr_delay)) %>%
group_by(day)
cancelled %>% head()
cancelled <- flights %>%
filter(is.na(dep_delay), is.na(arr_delay)) %>%
group_by(year, month, day)
cancelled %>% head()
cancelled <- flights %>%
mutate(cancelled = is.na(dep_delay) | is.na(arr_delay)) %>%
group_by(year, month, day)
cancelled %>% head()
cancelled <- flights %>%
mutate(cancelled = is.na(dep_delay) | is.na(arr_delay)) %>%
group_by(year, month, day) %>%
summarise(prop_cancelled = mean(cancelled))
cancelled %>% head()
cancelled <- flights %>%
mutate(cancelled = is.na(dep_delay) | is.na(arr_delay)) %>%
group_by(year, month, day) %>%
summarise(prop_cancelled = mean(cancelled),
avg_dep_delay = mean(dep_delay, na.rm = T))
cancelled %>% head()
cancelled %>% ggplot(aes(x = avg_dep_delay, y = prop_cancelled)) +
geom_point() + geom_smooth()
?flights
airlines$name
airlines
#Worst carriers
install.packages("lmvar")
library(lmvar)
getwd()
?seq
x <- seq(0, 20, length.out = 150)
x
b_sigma <- 1.3
b_mu <- 2.1
sigma <- 0.4
#Simulate data from model with time varying variance
n <- 150
sigma_t <- b_sigma*x + rnorm(n, 0, sigma)
plot(x,sigma_t)
sigma <- 1.3
sigma_t <- b_sigma*x + rnorm(n, 0, sigma)
plot(x,sigma_t)
rnorm(2,0,c(1,20))
mu_t <- b_mu*x + rnorm(n, 0, sigma_t)
log_sigma_t <- b_sigma*x + rnorm(n, 0, sigma)
sigma_t <- exp(log_sigma_t)
plot(x,sigma_t)
b_sigma <- 0.03
b_mu <- 2.1
sigma <- 1.3
log_sigma_t <- b_sigma*x + rnorm(n, 0, sigma)
sigma_t <- exp(log_sigma_t)
plot(x,sigma_t)
mu_t <- b_mu*x + rnorm(n, 0, sigma_t)
plot(x,mu_t)
X <- model.matrix(x)
fit <- lmvar(mu_t, X_mu = x, X_sigma_x)
library(lmvar)
fit <- lmvar(mu_t, X_mu = x, X_sigma_x)
fit <- lmvar(mu_t, X_mu = x, X_sigma = x)
summary(fit)
b_sigma <- 0.3
b_mu <- 2.1
sigma <- 1.3
log_sigma_t <- b_sigma*x + rnorm(n, 0, sigma)
sigma_t <- exp(log_sigma_t)
plot(x,sigma_t)
mu_t <- b_mu*x + rnorm(n, 0, sigma_t)
plot(x,mu_t)
fit <- lmvar(mu_t, X_mu = x, X_sigma = x)
summary(fit)
plot(x,mu_t, ylim = c(-100,100))
plot(fit)
log_sigma_t <- b_sigma*x + rnorm(n, 0, sigma)
sigma_t <- exp(log_sigma_t)
plot(x,sigma_t)
b_sigma <- 0.2
b_mu <- 2.1
sigma <- 1.3
log_sigma_t <- b_sigma*x + rnorm(n, 0, sigma)
sigma_t <- exp(log_sigma_t)
plot(x,sigma_t)
mu_t <- b_mu*x + rnorm(n, 0, sigma_t)
plot(x,mu_t, ylim = c(-100,100))
fit <- lmvar(mu_t, X_mu = x, X_sigma = x)
summary(fit)
abline(fit)
lmvar
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("data.table")
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("drat", repos = "https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("dartR")
?xgboost::xgboost
plot(x,mu_t, ylim = c(-100,100))
fit <- lm(mu_t ~ x)
fit <- lmvar(mu_t, X_mu = x, X_sigma = x)
library(lmvar)
fit <- lmvar(mu_t, X_mu = x, X_sigma = x)
fit2 <- lm(mu_t ~ x)
summary(fit)
summary(fit2)
abline(fit)
abline(fit2, col = "red")
plot(x,mu_t, ylim = c(-100,100), xlim = c(-5,25))
abline(fit)
abline(fit2, col = "red")
install.packages("zoo")
install.packages("zoo")
